{"version":3,"sources":["reducers/userSettingsReducer.ts","reducers/currencyRatesReducer.ts","actions/itemsActions.ts","reducers/itemsReducer.ts","reducers/alertsReducer.ts","store/store.ts","actions/userSettingsActions.ts","actions/currencyRatesActions.ts","actions/alertsActions.ts","api/exchange-rates-api/fetchRates.ts","components/AppBar/NavigationItem.tsx","components/AppBar/Navigator.tsx","models/Currency.ts","components/AppBar/UserPreferredCurrencySelector.tsx","components/AppBar/MainAppBar.tsx","utils/getCurrencySymbol.ts","components/ItemsSummary/ItemsList/DeliveryDate.tsx","custom-hooks/useConvertCurrency.ts","components/ItemsSummary/ItemsList/ItemCard.tsx","components/ItemsSummary/ItemsList/ItemsList.tsx","custom-hooks/useGroupItemsByStore.ts","components/ItemsSummary/StoresAggregations/StoreAggregationCard.tsx","components/ItemsSummary/StoresAggregations/StoresAggregations.tsx","components/ItemsSummary/ItemsSummary.tsx","components/NewItem/StoreSelector.tsx","components/NewItem/NewItemForm.tsx","components/NewItem/AddItemDialog.tsx","components/Pages/BoughtPage.tsx/AddItemFab.tsx","components/Pages/BoughtPage.tsx/BoughtPage.tsx","components/Pages/RecievedPage/RecievedPage.tsx","components/Alerts/Alerts.tsx","App.tsx","index.tsx"],"names":["initialState","preferredCurrency","intialState","rates","ILS","USD","setItemRecievedStatus","itemId","recieved","type","items","alerts","rootReducer","combineReducers","userSettings","state","action","preferredCurrencyAction","currency","currencyRates","itemsState","item","map","x","id","alertsState","alert","alertId","filter","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","applyMiddleware","logger","checkIfFetchRatesAlertIsPresent","persistStore","getState","some","fetchRatesLoop","a","dispatch","process","fetch","response","json","data","message","severity","fetchInterval","Number","setTimeout","NavigationItem","props","icon","route","title","onClick","location","useLocation","history","useHistory","isSelected","pathname","ListItem","button","selected","push","ListItemIcon","ListItemText","primary","useStyles","makeStyles","theme","createStyles","list","width","spacing","Navigator","open","onClose","classes","Drawer","anchor","List","className","currencyTypes","Object","freeze","select","marginLeft","label","marginTop","marginBottom","color","selectIcon","selectText","UserPreferredCurrencySelector","useSelector","useDispatch","Grid","container","direction","Typography","Select","value","disableUnderline","onChange","e","target","MenuItem","toolbarItem","offset","mixins","toolbar","MainAppBar","useState","navigationOpen","setNavigationOpen","AppBar","position","Toolbar","justify","IconButton","edge","variant","getTitle","getCurrencySymbol","DeliveryDate","React","memo","dateISO","toColor","date","Date","setHours","dateUnixTimestamp","getTime","todaysDate","todaysDateUnixTimestamp","text","moment","format","style","useConvertCurrency","price","priceCurrency","desiredCurrency","targetCurrency","root","minWidth","margin","storeLabel","deliveredIcon","ItemCard","convertCurrency","name","deliveryDateISO","priceInPreferredCurrency","Card","elevation","CardContent","toFixed","CardActions","Button","ItemsList","GridList","groupItemsByStore","itemsByStore","forEach","maxWidth","content","paddingBottom","StoreAggregationCard","totalPrice","reduce","prev","current","preferredCurrencySymbol","gutterBottom","Divider","length","StoresAggregations","itemsGroupedByStore","useMemo","useGroupItemsByStore","keys","ItemsSummary","tabValue","setTabValue","orderedByDeliveryDate","sort","b","TabContext","Tabs","newValue","Tab","TabPanel","createFilterOptions","StoreSelector","stores","Autocomplete","options","selectOnFocus","clearOnBlur","filterOptions","params","filtered","inputValue","renderInput","TextField","freeSolo","field","currencySelector","NewItemForm","storeItem","InputLabelProps","shrink","toISOString","closeButton","right","top","palette","grey","AddItemDialog","newItem","setNewItem","enableAdding","Dialog","disableBackdropClick","DialogTitle","disableTypography","DialogContent","dividers","DialogActions","disabled","finalItem","uuid","fab","bottom","fabIcon","marginRight","AddItemFab","dialogOpen","setDialogOpen","Fab","BoughtPage","unrecievedItems","RecievedPage","recievedItems","left","Alerts","Alert","AlertTitle","App","basename","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6caabc9a.chunk.js","sourcesContent":["import { Action } from 'redux'\nimport { SET_USER_PREFERRED_CURRENCY, SetUserPreferredCurrenyAction } from '../actions/userSettingsActions'\nimport { Currency } from '../models/Currency'\n\nexport interface UserSettings {\n    preferredCurrency: Currency\n}\n\nconst initialState: UserSettings = {\n    preferredCurrency: 'USD'\n}\n\nexport const userSettingsReducer = (state: UserSettings = initialState, action: Action): UserSettings => {\n    switch (action.type) {\n        case SET_USER_PREFERRED_CURRENCY:\n            const preferredCurrencyAction = action as SetUserPreferredCurrenyAction\n            return {\n                ...state,\n                preferredCurrency: preferredCurrencyAction.currency\n            }\n        default:\n            return state\n    }\n}","import { Action } from \"redux\";\nimport { UPDATE_CURRENCY_RATES, UpdateCurrencyRatesAction } from \"../actions/currencyRatesActions\";\nimport { Currency } from \"../models/Currency\";\n\nexport type CurrencyRates = Record<Currency, number>\n\nexport interface CurrencyRatesState {\n    rates: CurrencyRates\n}\n\nconst intialState: CurrencyRatesState = {\n    rates: {\n        ILS: 1,\n        USD: 1\n    }\n}\n\nexport const currencyRatesReducer = (state: CurrencyRatesState = intialState, action: Action): CurrencyRatesState => {\n    switch (action.type) {\n        case UPDATE_CURRENCY_RATES: {\n            const { rates } = action as UpdateCurrencyRatesAction\n\n            return {\n                ...state,\n                rates\n            }\n        }\n        default:\n            return state\n    }\n}","import { Action } from \"redux\";\nimport { StoreItem } from \"../models/StoreItem\";\n\nexport const ADD_NEW_ITEM = 'ADD_NEW_ITEM'\n\nexport interface AddNewItemAction extends Action<typeof ADD_NEW_ITEM> {\n    item: StoreItem\n}\n\nexport const addNewItem = (item: StoreItem): AddNewItemAction => ({\n    type: ADD_NEW_ITEM,\n    item\n})\n\n\nexport const SET_ITEM_RECIEVED_STATUS = 'SET_ITEM_RECIEVED_STATUS'\n\nexport interface SetItemRecievedStatusAction extends Action<typeof SET_ITEM_RECIEVED_STATUS> {\n    itemId: string\n    recieved: boolean\n}\n\nexport const setItemRecievedStatus = (itemId: string, recieved: boolean): SetItemRecievedStatusAction => ({\n    type: SET_ITEM_RECIEVED_STATUS,\n    itemId,\n    recieved\n})","import { StoreItem } from \"../models/StoreItem\";\nimport { Action } from \"redux\";\nimport { ADD_NEW_ITEM, AddNewItemAction, SET_ITEM_RECIEVED_STATUS, SetItemRecievedStatusAction } from \"../actions/itemsActions\";\n\nexport interface ItemsState {\n    items: StoreItem[]\n}\n\nconst initialState: ItemsState = {\n    items: []\n}\n\nexport const itemsReducer = (state: ItemsState = initialState, action: Action): ItemsState => {\n    switch (action.type) {\n        case ADD_NEW_ITEM: {\n            const { item } = action as AddNewItemAction\n\n            return {\n                ...state,\n                items: [...state.items, item]\n            }\n        }\n        case SET_ITEM_RECIEVED_STATUS: {\n            const { recieved, itemId } = action as SetItemRecievedStatusAction\n\n            return {\n                ...state,\n                items: state.items.map(x => x.id === itemId ? { ...x, recieved } : x)\n            }\n        }\n        default:\n            return state\n    }\n}","import { Action } from \"redux\"\nimport { ADD_ALERT, AddAlertAction, REMOVE_ALERT, RemoveAlertAction } from \"../actions/alertsActions\"\n\nexport interface GlobalAlert {\n    id: string\n    severity: 'error' | 'warning'\n    message: string\n}\n\nexport interface AlertsState {\n    alerts: GlobalAlert[]\n}\n\nconst initialState: AlertsState = {\n    alerts: []\n}\n\nexport const alertsReducer = (state: AlertsState = initialState, action: Action): AlertsState => {\n    switch (action.type) {\n        case ADD_ALERT: {\n            const { alert } = action as AddAlertAction\n\n            return {\n                ...state,\n                alerts: [...state.alerts, alert]\n            }\n        }\n        case REMOVE_ALERT: {\n            const { alertId } = action as RemoveAlertAction\n\n            return {\n                ...state,\n                alerts: state.alerts.filter(x => x.id !== alertId)\n            }\n        }\n        default:\n            return state\n    }\n}","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport logger from \"redux-logger\";\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { UserSettings, userSettingsReducer } from \"../reducers/userSettingsReducer\";\nimport { CurrencyRatesState, currencyRatesReducer } from \"../reducers/currencyRatesReducer\";\nimport { ItemsState, itemsReducer } from \"../reducers/itemsReducer\";\nimport { AlertsState, alertsReducer } from \"../reducers/alertsReducer\";\n\nexport interface AppState {\n    userSettings: UserSettings,\n    currencyRates: CurrencyRatesState,\n    itemsState: ItemsState\n    alertsState: AlertsState\n}\n\nconst rootReducer = combineReducers<AppState>({\n    userSettings: userSettingsReducer,\n    currencyRates: currencyRatesReducer,\n    itemsState: itemsReducer,\n    alertsState: alertsReducer\n})\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n}\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport const store = createStore(persistedReducer, applyMiddleware(logger))\nexport const persistor = persistStore(store)\n","import { Action } from \"redux\";\nimport { Currency } from \"../models/Currency\";\n\nexport const SET_USER_PREFERRED_CURRENCY = 'SET_USER_PREFERRED_CURRENCY'\n\nexport interface SetUserPreferredCurrenyAction extends Action<typeof SET_USER_PREFERRED_CURRENCY> {\n    currency: Currency\n}\n\nexport const setUserPreferredCurrency = (currency: Currency): SetUserPreferredCurrenyAction => ({\n    type: SET_USER_PREFERRED_CURRENCY,\n    currency\n})","import { Action } from \"redux\";\nimport { CurrencyRates } from \"../reducers/currencyRatesReducer\";\n\nexport const UPDATE_CURRENCY_RATES = 'UPDATE_CURRENCY_RATES'\n\nexport interface UpdateCurrencyRatesAction extends Action<typeof UPDATE_CURRENCY_RATES> {\n    rates: CurrencyRates\n}\n\nexport const updateCurrencyRates = (rates: CurrencyRates): UpdateCurrencyRatesAction => ({\n    type: UPDATE_CURRENCY_RATES,\n    rates\n})","import { Action } from \"redux\";\nimport { GlobalAlert } from \"../reducers/alertsReducer\";\n\nexport const ADD_ALERT = 'ADD_ALERT'\n\nexport interface AddAlertAction extends Action<typeof ADD_ALERT> {\n    alert: GlobalAlert\n}\n\nexport const addAlert = (alert: GlobalAlert): AddAlertAction => ({\n    type: ADD_ALERT,\n    alert\n})\n\n\nexport const REMOVE_ALERT = 'REMOVE_ALERT'\n\nexport interface RemoveAlertAction extends Action<typeof REMOVE_ALERT> {\n    alertId: string\n}\n\nexport const removeAlert = (alertId: string): RemoveAlertAction => ({\n    type: REMOVE_ALERT,\n    alertId\n})\n\n\nexport const ALERT_FAILED_TO_FETCH_EXCHANGE_RATES_ID = 'ALERT_FAILED_TO_FETCH_EXCHANGE_RATES'\n\nexport const alertFailedToFetchExchangeRates = (): AddAlertAction => addAlert({\n    id: ALERT_FAILED_TO_FETCH_EXCHANGE_RATES_ID,\n    message: 'An error occured while trying to fetch exchange rates, Please check your connectivity(Prices might not be up to date)',\n    severity: 'warning'\n})\n\nexport const turnOffFailedToFetchExchangeRates = (): RemoveAlertAction => removeAlert(ALERT_FAILED_TO_FETCH_EXCHANGE_RATES_ID)","import { store } from \"../../store/store\"\nimport { updateCurrencyRates } from \"../../actions/currencyRatesActions\"\nimport { CurrencyRates } from \"../../reducers/currencyRatesReducer\"\nimport { ALERT_FAILED_TO_FETCH_EXCHANGE_RATES_ID, alertFailedToFetchExchangeRates, turnOffFailedToFetchExchangeRates } from \"../../actions/alertsActions\"\n\ninterface ExchangeRatesApiResponse {\n    rates: CurrencyRates\n}\n\nconst checkIfFetchRatesAlertIsPresent = () => {\n    const { alerts } = store.getState().alertsState\n    return alerts.some(x => x.id === ALERT_FAILED_TO_FETCH_EXCHANGE_RATES_ID)\n}\n\nexport const fetchRatesLoop = async () => {\n    const { dispatch } = store\n\n    try {\n        const url = process.env.REACT_APP_EXCHANGE_RATES_URL as string\n        const response = await fetch(url)\n        const data = await response.json() as ExchangeRatesApiResponse\n\n        if (checkIfFetchRatesAlertIsPresent()) {\n            dispatch(turnOffFailedToFetchExchangeRates())\n        }\n\n        dispatch(updateCurrencyRates(data.rates))\n    } catch {\n        if (!checkIfFetchRatesAlertIsPresent()) {\n            dispatch(alertFailedToFetchExchangeRates())\n        }\n    }\n\n    const fetchInterval = Number(process.env.REACT_APP_EXCHANGE_RATES_API_FETCH_INTERVAL_SECONDS) * 1000\n    setTimeout(fetchRatesLoop, fetchInterval)\n}","import { ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\nimport React, { ReactElement } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\ninterface Props {\n    title: string\n    icon: ReactElement\n    route: string\n    onClick(): void\n}\n\nexport const NavigationItem = (props: Props) => {\n    const { icon, route, title, onClick } = props\n    const location = useLocation()\n    const history = useHistory()\n\n    const isSelected = route === location.pathname\n    const navigate = () => {\n        history.push(route)\n        onClick()\n    }\n\n    return <ListItem button selected={isSelected} onClick={navigate}>\n        <ListItemIcon>{icon}</ListItemIcon>\n        <ListItemText primary={title} />\n    </ListItem>\n}","import { createStyles, Drawer, List, makeStyles, Theme } from '@material-ui/core';\nimport PlaylistAddCheckRoundedIcon from '@material-ui/icons/PlaylistAddCheckRounded';\nimport ShoppingCartRoundedIcon from '@material-ui/icons/ShoppingCartRounded';\nimport React from 'react';\nimport { NavigationItem } from './NavigationItem';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n    list: {\n        width: theme.spacing(32)\n    }\n}))\n\ninterface Props {\n    open: boolean\n    onClose(): void\n}\n\nexport const Navigator = (props: Props) => {\n    const { open, onClose } = props\n    const classes = useStyles()\n\n    return <Drawer anchor='left' open={open} onClose={onClose}>\n        <List className={classes.list}>\n            <NavigationItem icon={<ShoppingCartRoundedIcon />} title=\"Bought\" route=\"/bought\" onClick={onClose} />\n            <NavigationItem icon={<PlaylistAddCheckRoundedIcon />} title=\"Recieved\" route=\"/recieved\" onClick={onClose} />\n        </List>\n    </Drawer>\n}","export type Currency = 'USD' | 'ILS'\n\nexport const currencyTypes: Currency[] = ['USD', 'ILS']\nObject.freeze(currencyTypes)","import { createStyles, Grid, makeStyles, MenuItem, Select, Theme, Typography } from '@material-ui/core'\nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setUserPreferredCurrency } from '../../actions/userSettingsActions'\nimport { Currency, currencyTypes } from '../../models/Currency'\nimport { UserSettings } from '../../reducers/userSettingsReducer'\nimport { AppState } from '../../store/store'\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        select: {\n            marginLeft: theme.spacing(1),\n        },\n        label: {\n            marginTop: 'auto',\n            marginBottom: 'auto',\n            color: 'greenyellow'\n        },\n        selectIcon: {\n            color: 'white'\n        },\n        selectText: {\n            color: 'white'\n        }\n    }),\n);\n\ninterface Props {\n    className?: string\n}\n\nexport const UserPreferredCurrencySelector = (props: Props) => {\n    const { className } = props\n    const userSettings = useSelector<AppState, UserSettings>(x => x.userSettings)\n    const classes = useStyles()\n    const dispatch = useDispatch()\n\n    return <Grid className={className} container direction='row'>\n        <Grid item className={classes.label}>\n            <Typography>Select Preferable Currency</Typography>\n        </Grid>\n        <Grid item className={classes.select}>\n            <Select value={userSettings.preferredCurrency}\n                classes={{ icon: classes.selectIcon, select: classes.selectText }}\n                disableUnderline\n                onChange={e => dispatch(setUserPreferredCurrency(e.target.value as Currency))}>\n                {currencyTypes.map(x => <MenuItem key={x} value={x}>{x}</MenuItem>)}\n            </Select>\n        </Grid>\n    </Grid>\n}","import { AppBar, createStyles, IconButton, makeStyles, Theme, Toolbar, Typography, Grid } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport React, { Fragment, useState } from 'react';\nimport { Navigator } from './Navigator';\nimport { useLocation } from 'react-router-dom';\nimport { UserPreferredCurrencySelector } from './UserPreferredCurrencySelector';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        toolbarItem: {\n            marginTop: 'auto',\n            marginBottom: 'auto'\n        },\n        icon: {\n            marginTop: 'auto',\n            marginBottom: 'auto',\n            color: 'white'\n        },\n        offset: theme.mixins.toolbar\n    }),\n);\n\nconst getTitle = (location: string) => {\n    switch (location) {\n        case '/recieved':\n            return 'Recieved'\n        case '/bought':\n        case '/':\n        default:\n            return 'Bought'\n    }\n}\n\nexport const MainAppBar = () => {\n    const classes = useStyles()\n    const [navigationOpen, setNavigationOpen] = useState(false)\n    const location = useLocation()\n\n    return <Fragment>\n        <AppBar position='fixed'>\n            <Toolbar>\n                <Grid container direction='row' justify='space-between'>\n                    <IconButton edge=\"start\" className={classes.icon} onClick={() => setNavigationOpen(true)}>\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography className={classes.toolbarItem} variant='h5'>{getTitle(location.pathname)}</Typography>\n                    <Grid item className={classes.toolbarItem}>\n                        <UserPreferredCurrencySelector />\n                    </Grid>\n                </Grid>\n            </Toolbar>\n        </AppBar>\n        <div className={classes.offset} />\n        <Navigator open={navigationOpen} onClose={() => setNavigationOpen(false)} />\n    </Fragment>\n}   ","import { Currency } from \"../models/Currency\";\n\nexport const getCurrencySymbol = (currency: Currency) => {\n    switch (currency) {\n        case 'USD':\n            return '$'\n        case 'ILS':\n            return '₪'\n    }\n}","import { Typography } from '@material-ui/core'\nimport moment from 'moment'\nimport React from 'react'\n\ninterface Props {\n    dateISO: string\n    toColor?: boolean\n}\n\nexport const DeliveryDate = React.memo((props: Props) => {\n    const { dateISO, toColor } = props\n    const date = new Date(dateISO)\n    date.setHours(0, 0, 0, 0)\n    const dateUnixTimestamp = date.getTime()\n\n    const todaysDate = new Date()\n    todaysDate.setHours(0, 0, 0, 0)\n    const todaysDateUnixTimestamp = todaysDate.getTime()\n\n\n    let color\n    if (toColor) {\n        if (dateUnixTimestamp < todaysDateUnixTimestamp) {\n            color = 'red'\n        } else if (dateUnixTimestamp === todaysDateUnixTimestamp) {\n            color = 'orange'\n        } else {\n            color = 'green'\n        }\n    }\n\n    const text = moment(date).format('DD-MM-YYYY')\n\n    return <Typography style={{ color }}>{text}</Typography>\n})","import { useSelector } from \"react-redux\"\nimport { Currency } from \"../models/Currency\"\nimport { CurrencyRatesState } from \"../reducers/currencyRatesReducer\"\nimport { AppState } from \"../store/store\"\nimport { UserSettings } from \"../reducers/userSettingsReducer\"\n\ntype ConvertToCurrency = (price: number, priceCurrency: Currency, desiredCurrency?: Currency) => number\n\nexport const useConvertCurrency = (): ConvertToCurrency => {\n    const { rates } = useSelector<AppState, CurrencyRatesState>(x => x.currencyRates)\n    const { preferredCurrency } = useSelector<AppState, UserSettings>(x => x.userSettings)\n\n    return (price: number, priceCurrency: Currency, desiredCurrency?: Currency): number => {\n        const targetCurrency = desiredCurrency ?? preferredCurrency\n        const priceInBaseCurrency = price / rates[priceCurrency]\n\n        return priceInBaseCurrency * rates[targetCurrency]\n    }\n}","import { Button, Card, CardActions, CardContent, createStyles, Grid, makeStyles, Theme, Typography } from '@material-ui/core'\nimport DoneOutlineRoundedIcon from '@material-ui/icons/DoneOutlineRounded'\nimport React from 'react'\nimport { StoreItem } from '../../../models/StoreItem'\nimport { getCurrencySymbol } from '../../../utils/getCurrencySymbol'\nimport { DeliveryDate } from './DeliveryDate'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setItemRecievedStatus } from '../../../actions/itemsActions'\nimport SentimentDissatisfiedRoundedIcon from '@material-ui/icons/SentimentDissatisfiedRounded';\nimport { useConvertCurrency } from '../../../custom-hooks/useConvertCurrency'\nimport { AppState } from '../../../store/store'\nimport { UserSettings } from '../../../reducers/userSettingsReducer'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n    root: {\n        minWidth: theme.spacing(40),\n        margin: theme.spacing(2)\n    },\n    date: {\n        marginTop: theme.spacing(0.5)\n    },\n    storeLabel: {\n        marginTop: 'auto',\n        marginBottom: 'auto',\n        marginLeft: theme.spacing(1)\n    },\n    deliveredIcon: {\n        marginLeft: theme.spacing(1)\n    }\n}))\n\ninterface Props {\n    item: StoreItem\n}\n\nexport const ItemCard = (props: Props) => {\n    const { item } = props\n    const classes = useStyles()\n    const { preferredCurrency } = useSelector<AppState, UserSettings>(x => x.userSettings)\n    const dispatch = useDispatch()\n    const convertCurrency = useConvertCurrency()\n    const { id, recieved, name, store, price, priceCurrency, deliveryDateISO } = item\n\n    const priceInPreferredCurrency = convertCurrency(price, priceCurrency)\n\n    return <Card className={classes.root} elevation={4}>\n        <CardContent>\n            <Grid container direction='row' justify='space-between'>\n                <Grid item>\n                    <Typography variant='subtitle1'>{name}</Typography>\n                    <Typography variant='subtitle2'>{priceInPreferredCurrency.toFixed(2)}{getCurrencySymbol(preferredCurrency)}</Typography>\n                </Grid>\n                <Grid item className={classes.date}>\n                    <DeliveryDate dateISO={deliveryDateISO} toColor={!recieved} />\n                </Grid>\n            </Grid>\n        </CardContent>\n        <CardActions>\n            <Grid container direction='row' justify='space-between'>\n                <Grid item className={classes.storeLabel}>\n                    <Typography variant='subtitle2'>From {store}</Typography>\n                </Grid>\n                <Grid item>\n                    {recieved ?\n                        <Button variant='outlined' onClick={() => dispatch(setItemRecievedStatus(id, false))}>\n                            Still waiting\n                            <SentimentDissatisfiedRoundedIcon className={classes.deliveredIcon} />\n                        </Button>\n                        :\n                        <Button variant='outlined' onClick={() => dispatch(setItemRecievedStatus(id, true))}>\n                            Recieved\n                            <DoneOutlineRoundedIcon className={classes.deliveredIcon} />\n                        </Button>}\n                </Grid>\n            </Grid>\n        </CardActions>\n    </Card>\n}","import { GridList } from '@material-ui/core'\nimport React from 'react'\nimport { StoreItem } from '../../../models/StoreItem'\nimport { ItemCard } from './ItemCard'\n\ninterface Props {\n    items: StoreItem[]\n}\n\nexport const ItemsList = (props: Props) => {\n    const { items } = props\n\n    return <GridList>\n        {items.map(x => <ItemCard key={x.id} item={x} />)}\n    </GridList>\n}","import { StoreItem } from \"../models/StoreItem\"\nimport { useMemo } from \"react\"\n\ninterface ItemsByStore {\n    [storeName: string]: StoreItem[]\n}\n\nexport const groupItemsByStore = (items: StoreItem[]): ItemsByStore => {\n    const itemsByStore: ItemsByStore = {}\n\n    items.forEach(x => {\n        if (!itemsByStore[x.store]) {\n            itemsByStore[x.store] = []\n        }\n\n        itemsByStore[x.store].push(x)\n    })\n\n    return itemsByStore\n}\n\nexport const useGroupItemsByStore = (items: StoreItem[]): ItemsByStore => {\n    const itemsByStore = useMemo(() => groupItemsByStore(items), [items])\n\n    return itemsByStore\n}","import { Card, CardActions, CardContent, createStyles, Divider, Grid, makeStyles, Theme, Typography } from '@material-ui/core'\nimport React, { Fragment } from 'react'\nimport { StoreItem } from '../../../models/StoreItem'\nimport { getCurrencySymbol } from '../../../utils/getCurrencySymbol'\nimport { useConvertCurrency } from '../../../custom-hooks/useConvertCurrency'\nimport { useSelector } from 'react-redux'\nimport { AppState } from '../../../store/store'\nimport { UserSettings } from '../../../reducers/userSettingsReducer'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n    root: {\n        minWidth: theme.spacing(40),\n        maxWidth: theme.spacing(80),\n        margin: theme.spacing(2),\n    },\n    content: {\n        paddingBottom: theme.spacing(1)\n    }\n}))\n\ninterface Props {\n    store: string\n    items: StoreItem[]\n}\n\nexport const StoreAggregationCard = (props: Props) => {\n    const { items, store } = props\n    const classes = useStyles()\n    const convertCurrency = useConvertCurrency()\n    const { preferredCurrency } = useSelector<AppState, UserSettings>(x => x.userSettings)\n\n    const totalPrice = items.reduce((prev, current) => prev + convertCurrency(current.price, current.priceCurrency), 0)\n    const preferredCurrencySymbol = getCurrencySymbol(preferredCurrency)\n\n    return <Card className={classes.root} elevation={4}>\n        <CardContent classes={{ root: classes.content }}>\n            <Typography gutterBottom variant='h6'>{store}</Typography>\n            {items.map(x => <Fragment key={x.id}>\n                <Grid container direction='row' justify='space-between'>\n                    <Grid item>\n                        <Typography variant='subtitle2'>{x.name}</Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography variant='caption'>{convertCurrency(x.price, x.priceCurrency).toFixed(2)}{preferredCurrencySymbol}</Typography>\n                    </Grid>\n                </Grid>\n            </Fragment>)}\n        </CardContent>\n        <Divider />\n        <CardActions>\n            <Grid container direction='row' justify='space-between'>\n                <Grid item>\n                    <Typography>Total of {items.length} items</Typography>\n                </Grid>\n                <Grid item>\n                    <Typography>Total price: {totalPrice.toFixed(2)}{preferredCurrencySymbol}</Typography>\n                </Grid>\n            </Grid>\n        </CardActions>\n    </Card>\n}","import React, { Fragment } from 'react'\nimport { StoreItem } from '../../../models/StoreItem'\nimport { useGroupItemsByStore } from '../../../custom-hooks/useGroupItemsByStore'\nimport { StoreAggregationCard } from './StoreAggregationCard'\n\ninterface Props {\n    items: StoreItem[]\n}\n\nexport const StoresAggregations = (props: Props) => {\n    const { items } = props\n    const itemsGroupedByStore = useGroupItemsByStore(items)\n\n    return <Fragment>\n        {Object.keys(itemsGroupedByStore).map(x => <StoreAggregationCard key={x} store={x} items={itemsGroupedByStore[x]} />)}\n    </Fragment>\n}","import { AppBar, makeStyles, Tab, Tabs, Theme } from '@material-ui/core';\nimport TabContext from '@material-ui/lab/TabContext';\nimport TabPanel from '@material-ui/lab/TabPanel';\nimport React, { useState } from 'react';\nimport { ItemsList } from './ItemsList/ItemsList';\nimport { StoresAggregations } from './StoresAggregations/StoresAggregations';\nimport { StoreItem } from '../../models/StoreItem';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        width: '100%'\n    },\n}));\n\nconst LIST_TAB = 'list'\nconst STORE_AGGREGATION_TAB = 'stores-aggregations'\n\ntype TabValue = typeof LIST_TAB | typeof STORE_AGGREGATION_TAB\n\ninterface Props {\n    items: StoreItem[]\n}\n\nexport const ItemsSummary = (props: Props) => {\n    const { items } = props\n    const [tabValue, setTabValue] = useState<TabValue>('list')\n    const classes = useStyles()\n    const orderedByDeliveryDate = items.sort((a, b) => new Date(a.deliveryDateISO).getTime() - new Date(b.deliveryDateISO).getTime())\n\n    return <div className={classes.root}>\n        <TabContext value={tabValue}>\n            <AppBar position=\"static\">\n                <Tabs variant='fullWidth' value={tabValue} onChange={(e, newValue: TabValue) => setTabValue(newValue)}>\n                    <Tab label='List' value={LIST_TAB} />\n                    <Tab label='Stores Aggregations' value={STORE_AGGREGATION_TAB} />\n                </Tabs>\n            </AppBar>\n            <TabPanel value={LIST_TAB}>\n                <ItemsList items={orderedByDeliveryDate} />\n            </TabPanel>\n            <TabPanel value={STORE_AGGREGATION_TAB}>\n                <StoresAggregations items={orderedByDeliveryDate} />\n            </TabPanel>\n        </TabContext>\n    </div >\n}","import { TextField } from '@material-ui/core';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport React, { useMemo } from 'react';\nimport { groupItemsByStore } from '../../custom-hooks/useGroupItemsByStore';\nimport { useSelector } from 'react-redux';\nimport { AppState } from '../../store/store';\nimport { ItemsState } from '../../reducers/itemsReducer';\n\ninterface Props {\n    value?: string\n    onChange(value: string | null): void\n    classes?: {\n        root?: string\n    }\n}\n\nconst filter = createFilterOptions<string>();\n\nexport const StoreSelector = (props: Props) => {\n    const { value, onChange, classes } = props\n    const { items } = useSelector<AppState, ItemsState>(x => x.itemsState)\n\n    const stores = useMemo(() => {\n        const itemsByStore = groupItemsByStore(items)\n        return Object.keys(itemsByStore)\n    }, [items])\n\n    return <Autocomplete value={value}\n        onChange={(e, newValue) => {\n            onChange(newValue)\n        }}\n        options={stores}\n        selectOnFocus\n        clearOnBlur\n        filterOptions={(options, params) => {\n            const filtered = filter(options, params)\n\n            if (filtered.length) {\n                return filtered\n            } else {\n                return [params.inputValue]\n            }\n        }}\n        renderInput={(params) => <TextField {...params} classes={classes} label=\"Select Store\" variant='outlined' />}\n        freeSolo />\n}","import { createStyles, Grid, makeStyles, MenuItem, Select, TextField, Theme } from '@material-ui/core'\nimport React from 'react'\nimport { Currency, currencyTypes } from '../../models/Currency'\nimport { StoreItem } from '../../models/StoreItem'\nimport { StoreSelector } from './StoreSelector'\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n    field: {\n        marginTop: theme.spacing(2),\n    },\n    currencySelector: {\n        marginLeft: theme.spacing(1)\n    }\n}))\n\ninterface Props {\n    storeItem: Partial<StoreItem>\n    onChange(store: Partial<StoreItem>): void\n}\n\nexport const NewItemForm = (props: Props) => {\n    const { onChange, storeItem } = props\n    const classes = useStyles()\n\n    return <Grid container direction='column'>\n        <TextField label='Name' variant='outlined' value={storeItem.name} onChange={e => onChange({ name: e.target.value })} />\n        <StoreSelector value={storeItem.store}\n            classes={{ root: classes.field }}\n            onChange={store => onChange({ store: store ?? '' })} />\n        <Grid container className={classes.field} item direction='row'>\n            <TextField classes={{}}\n                label='Price'\n                variant='outlined'\n                type='number'\n                value={storeItem.price}\n                onChange={e => onChange({ price: Number(e.target.value) })} />\n            <Select className={classes.currencySelector}\n                value={storeItem.priceCurrency}\n                onChange={x => onChange({ priceCurrency: x.target.value as Currency })}>\n                {currencyTypes.map(x => <MenuItem value={x} key={x}>{x}</MenuItem>)}\n            </Select>\n        </Grid>\n        <TextField classes={{ root: classes.field }} label='Estimated Delivery Date'\n            type='date'\n            variant='outlined'\n            InputLabelProps={{\n                shrink: true,\n            }}\n            onChange={e => onChange({ deliveryDateISO: new Date(e.target.value).toISOString() })} />\n    </Grid>\n}","import { Button, createStyles, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, makeStyles, Theme, Typography } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport React, { useState } from 'react';\nimport { NewItemForm } from './NewItemForm';\nimport { StoreItem } from '../../models/StoreItem';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AppState } from '../../store/store';\nimport { UserSettings } from '../../reducers/userSettingsReducer';\nimport { addNewItem } from '../../actions/itemsActions';\nimport { v4 as uuid } from 'uuid';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n    closeButton: {\n        position: \"absolute\",\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500]\n    }\n}))\n\ninterface Props {\n    open: boolean\n    onClose(): void\n}\n\nexport const AddItemDialog = (props: Props) => {\n    const { open, onClose } = props\n    const userSettings = useSelector<AppState, UserSettings>(x => x.userSettings)\n    const [newItem, setNewItem] = useState<Partial<StoreItem>>({ priceCurrency: userSettings.preferredCurrency })\n    const classes = useStyles()\n    const dispatch = useDispatch()\n\n    const enableAdding = newItem.name && newItem.deliveryDateISO && newItem.price && newItem.priceCurrency && newItem.store\n\n    const addItem = () => {\n        if (newItem.name && newItem.deliveryDateISO && newItem.price && newItem.priceCurrency && newItem.store) {\n            const finalItem: StoreItem = {\n                name: newItem.name,\n                store: newItem.store,\n                price: newItem.price,\n                priceCurrency: newItem.priceCurrency,\n                deliveryDateISO: newItem.deliveryDateISO,\n                recieved: false,\n                id: uuid()\n            }\n            dispatch(addNewItem(finalItem))\n            onClose()\n        }\n    }\n\n    return <Dialog open={open} disableBackdropClick onClose={onClose}>\n        <DialogTitle disableTypography>\n            <Typography variant='h6'>New Item</Typography>\n            <IconButton className={classes.closeButton} onClick={onClose}>\n                <CloseIcon />\n            </IconButton>\n        </DialogTitle>\n        <DialogContent dividers>\n            <NewItemForm onChange={x => setNewItem({ ...newItem, ...x })} storeItem={newItem} />\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={onClose}>Cancel</Button>\n            <Button disabled={!enableAdding} onClick={addItem}>Add</Button>\n        </DialogActions>\n    </Dialog>\n}","import { createStyles, Fab, makeStyles, Theme } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/AddRounded';\nimport React, { Fragment, useState } from 'react';\nimport { AddItemDialog } from '../../NewItem/AddItemDialog';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n    fab: {\n        position: 'absolute',\n        bottom: theme.spacing(4),\n        right: theme.spacing(4)\n    },\n    fabIcon: {\n        marginRight: theme.spacing(1)\n    }\n}))\n\ninterface Props {\n\n}\n\nexport const AddItemFab = (props: Props) => {\n    const [dialogOpen, setDialogOpen] = useState(false)\n    const classes = useStyles()\n\n    const closeDialog = () => setDialogOpen(false)\n    const openDialog = () => setDialogOpen(true)\n\n    return <Fragment>\n        <Fab color='primary' variant='extended' className={classes.fab} onClick={openDialog}>\n            <AddIcon className={classes.fabIcon} />\n            Add Item\n        </Fab>\n        {dialogOpen && <AddItemDialog open={dialogOpen} onClose={closeDialog} />}\n    </Fragment>\n}","import { Grid } from '@material-ui/core'\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport { ItemsState } from '../../../reducers/itemsReducer'\nimport { AppState } from '../../../store/store'\nimport { ItemsSummary } from '../../ItemsSummary/ItemsSummary'\nimport { AddItemFab } from './AddItemFab'\n\nexport const BoughtPage = () => {\n    const { items } = useSelector<AppState, ItemsState>(x => x.itemsState)\n    const unrecievedItems = items.filter(x => !x.recieved)\n\n    return <Grid container>\n        <ItemsSummary items={unrecievedItems} />\n        <AddItemFab />\n    </Grid>\n}","import React from 'react'\nimport { ItemsSummary } from '../../ItemsSummary/ItemsSummary'\nimport { AppState } from '../../../store/store'\nimport { useSelector } from 'react-redux'\nimport { ItemsState } from '../../../reducers/itemsReducer'\n\nexport const RecievedPage = () => {\n    const { items } = useSelector<AppState, ItemsState>(x => x.itemsState)\n    const recievedItems = items.filter(x => x.recieved)\n\n    return <ItemsSummary items={recievedItems} />\n}","import { createStyles, makeStyles, Theme } from '@material-ui/core';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { AlertsState } from '../../reducers/alertsReducer';\nimport { AppState } from '../../store/store';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n    root: {\n        position: 'absolute',\n        bottom: theme.spacing(2),\n        left: theme.spacing(2)\n    }\n}))\n\nexport const Alerts = () => {\n    const { alerts } = useSelector<AppState, AlertsState>(x => x.alertsState)\n    const classes = useStyles()\n\n    return <div className={classes.root}>\n        {alerts.map(x => <Alert severity={x.severity}>\n            <AlertTitle>Warning</AlertTitle>\n            {x.message}\n        </Alert>)}\n    </div>\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, HashRouter } from \"react-router-dom\";\nimport { MainAppBar } from './components/AppBar/MainAppBar';\nimport { BoughtPage } from './components/Pages/BoughtPage.tsx/BoughtPage';\nimport { RecievedPage } from './components/Pages/RecievedPage/RecievedPage';\nimport { Alerts } from './components/Alerts/Alerts';\n\nfunction App() {\n  return <HashRouter basename={process.env.PUBLIC_URL}>\n    <MainAppBar />\n    <Alerts />\n    <Switch >\n      <Route path='/recieved'>\n        <RecievedPage />\n      </Route>\n      <Route path={['/', '/bought']}>\n        <BoughtPage />\n      </Route>\n    </Switch>\n  </HashRouter>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { fetchRatesLoop } from './api/exchange-rates-api/fetchRates';\nimport App from './App';\nimport { store } from './store/store';\n\nfetchRatesLoop()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}